use std::io::{self, Write}; // Import Write trait for flush
use printpdf::*;
use std::fs::File;
use std::io::BufWriter;

struct Student {
    name: String,
    total_marks: f32,
    subjects: i32,
}

impl Student {
    fn calculate_average(&self) -> f32 {
        self.total_marks / self.subjects as f32
    }

    fn assign_grade(&self) -> String {
        let average = self.calculate_average();
        match average {
            a if a >= 90.0 => "A".to_string(),
            a if a >= 75.0 => "B".to_string(),
            a if a >= 60.0 => "C".to_string(),
            _ => "D".to_string(),
        }
    }

    fn generate_report(&self) {
        let average = self.calculate_average();
        let grade = self.assign_grade();
        
        println!("\nReport Card");
        println!("----------------------------");
        println!("Student Name: {}", self.name);
        println!("Total Marks: {}", self.total_marks);
        println!("Number of Subjects: {}", self.subjects);
        println!("Average: {:.2}%", average);
        println!("Grade: {}", grade);
        println!("----------------------------\n");
    }

    fn generate_pdf(&self) -> Result<(), printpdf::Error> {
        let average = self.calculate_average();
        let grade = self.assign_grade();
        
        // Create a new PDF document
        let (doc, page, layer) = PdfDocument::new(
            "Report Card", 
            Mm(210.0),  // A4 width
            Mm(297.0),  // A4 height
            "Layer 1"
        );
        
        // Current layer for adding content
        let current_layer = doc.get_page(page).get_layer(layer);
        
        // Set font (using built-in Helvetica)
        let font = doc.add_builtin_font(BuiltinFont::Helvetica)?;
        
        // Add title with a larger font size and bold
        current_layer.use_text("REPORT CARD", 36.0, Mm(105.0), Mm(250.0), &font);
        
        // Add a horizontal line below the title
        current_layer.add_shape(Line {
            points: vec![
                (Point::new(Mm(15.0), Mm(240.0)), false),
                (Point::new(Mm(195.0), Mm(240.0)), false),
            ],
            is_closed: false,
            has_fill: false,
            has_stroke: true,
            is_clipping_path: false,
        });
        
        // Add student details with better formatting
        let details = vec![
            format!("Student Name: {}", self.name),
            format!("Total Marks: {}", self.total_marks),
            format!("Number of Subjects: {}", self.subjects),
            format!("Average: {:.2}%", average),
            format!("Grade: {}", grade),
        ];
        
        let mut y_position = 210.0; // Starting position for details
        for detail in details {
            current_layer.use_text(detail, 18.0, Mm(20.0), Mm(y_position), &font);
            y_position -= 30.0; // Space between lines
        }
        
        // Add a footer with a decorative line
        current_layer.add_shape(Line {
            points: vec![
                (Point::new(Mm(15.0), Mm(y_position)), false),
                (Point::new(Mm(195.0), Mm(y_position)), false),
            ],
            is_closed: false,
            has_fill: false,
            has_stroke: true,
            is_clipping_path: false,
        });
        
        // Add a footer text
        current_layer.use_text("Generated by Student Grade System", 12.0, Mm(105.0), Mm(y_position - 15.0), &font);
        
        // Save the PDF
        doc.save(&mut BufWriter::new(File::create("report_card.pdf")?))?;
        Ok(())
    }
}

fn main() {
    println!("=== Student Grade System ===");
    
    loop {
        let name = get_input("Enter student name: ");
        let total_marks = get_input("Enter total marks: ").parse::<f32>().unwrap_or_else(|_| {
            println!("Invalid number entered, using 0 as default");
            0.0
        });
        
        let subjects = get_input("Enter number of subjects: ").parse::<i32>().unwrap_or_else(|_| {
            println!("Invalid number entered, using 1 as default");
            1
        });
        
        let student = Student {
            name,
            total_marks,
            subjects,
        };
        
        student.generate_report();
        
        match student.generate_pdf() {
            Ok(_) => println!("✅ PDF report generated: 'report_card.pdf'"),
            Err(e) => println!("❌ Error generating PDF: {}", e),
        }
        
        let continue_input = get_input("Create another report? (y/n): ").to_lowercase();
        if continue_input != "y" {
            println!("Exiting program...");
            break;
        }
    }
}

fn get_input(prompt: &str) -> String {
    print!("{}", prompt);
    io::stdout().flush().unwrap(); // Ensure prompt is displayed immediately
    let mut input = String::new();
    io::stdin().read_line(&mut input).expect("Failed to read input");
    input.trim().to_string()
}
